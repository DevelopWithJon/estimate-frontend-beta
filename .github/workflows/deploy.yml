name: deploy

on:
  push: # Triggers the workflow when code is pushed to the repository
    branches:
      - main
      - develop
  workflow_dispatch: # Allows manual triggering of the workflow

env:
  DROPLET_IP: ${{ vars.DROPLET_IP }} # IP address of your DigitalOcean droplet
  DROPLET_USER: ${{ vars.DROPLET_USER }} # SSH user for the droplet (e.g., root)
  SSH_PRIVATE_KEY: ${{ vars.SSH_PRIVATE_KEY }} # Private key for SSH access
  DATABASE_URL: ${{ secrets.DATABASE_URL }} # Database URL from secrets
  STRIPE_SECRET_KEY: ${{ secrets.STRIPE_SECRET_KEY }} # Stripe secret key from secrets
  DOCKER_IMAGE: estimate-app

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Setup SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ env.SSH_PRIVATE_KEY }}" | tr -d '\r' > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          eval $(ssh-agent -s)
          ssh-add ~/.ssh/id_rsa
      
      - name: Add Droplet to known hosts
        run: |
          mkdir -p ~/.ssh
          echo "${{ env.DROPLET_IP }} $(ssh-keyscan -H ${{ env.DROPLET_IP }} 2>/dev/null)" >> ~/.ssh/known_hosts

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ env.DOCKER_IMAGE }}:latest
          build-args: |
            DATABASE_URL=${{ secrets.DATABASE_URL }}
            STRIPE_SECRET_KEY=${{ secrets.STRIPE_SECRET_KEY }}

      - name: SSH into DigitalOcean droplet and deploy
        run: |
          ssh -o StrictHostKeyChecking=no ${{ env.DROPLET_USER }}@${{ env.DROPLET_IP }} << 'ENDSSH'
          docker pull ${{ env.DOCKER_IMAGE }}:latest
          docker stop my-app || true
          docker rm my-app || true
          docker run -d \
            --name my-app \
            --restart unless-stopped \
            -e DATABASE_URL="${{ secrets.DATABASE_URL }}" \
            -e STRIPE_SECRET_KEY="${{ secrets.STRIPE_SECRET_KEY }}" \
            -p 3000:3000 \
            ${{ env.DOCKER_IMAGE }}:latest
          docker image prune -f
          ENDSSH