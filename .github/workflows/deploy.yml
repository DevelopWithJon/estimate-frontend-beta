name: deploy

on:
  push: # Triggers the workflow when code is pushed to the repository
    branches:
      - main
      - develop
  workflow_dispatch: # Allows manual triggering of the workflow

env:
  DROPLET_IP: ${{ vars.DROPLET_IP }} # IP address of your DigitalOcean droplet
  DROPLET_USER: ${{ vars.DROPLET_USER }} # SSH user for the droplet (e.g., root)
  SSH_PRIVATE_KEY: ${{ vars.SSH_PRIVATE_KEY }} # Private key for SSH access
  DATABASE_URL: ${{ secrets.DATABASE_URL }} # Database URL from secrets
  STRIPE_SECRET_KEY: ${{ secrets.STRIPE_SECRET_KEY }} # Stripe secret key from secrets

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build Docker image
        run: |
          docker build \
            --build-arg DATABASE_URL=${{ secrets.DATABASE_URL }} \
            --build-arg STRIPE_SECRET_KEY=${{ secrets.STRIPE_SECRET_KEY }} \
            -t my-app:latest .

      - name: Save Docker image as tar archive
        run: docker save -o my-app.tar my-app:latest

      - name: Copy Docker image to DigitalOcean droplet
        run: |
          scp -o StrictHostKeyChecking=no -i ${{ env.SSH_PRIVATE_KEY }} my-app.tar ${{ env.DROPLET_USER }}@${{ env.DROPLET_IP }}:/root/my-app.tar

      - name: SSH into DigitalOcean droplet and deploy
        run: |
          ssh -o StrictHostKeyChecking=no -i ${{ env.SSH_PRIVATE_KEY }} ${{ env.DROPLET_USER }}@${{ env.DROPLET_IP }} << 'EOF'
          docker load -i /root/my-app.tar
          docker stop my-app || true
          docker rm my-app || true
          docker run -d \
            --name my-app \
            --env DATABASE_URL=${{ secrets.DATABASE_URL }} \
            --env STRIPE_SECRET_KEY=${{ secrets.STRIPE_SECRET_KEY }} \
            -p 3000:3000 \
            my-app:latest
          EOF