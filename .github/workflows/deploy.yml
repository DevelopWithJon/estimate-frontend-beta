name: deploy

on:
  push:
    branches:
      - main
      - develop
  workflow_dispatch:

env:
  DROPLET_IP: ${{ vars.DROPLET_IP }}
  DROPLET_USER: ${{ vars.DROPLET_USER }}
  SSH_PRIVATE_KEY: ${{ vars.SSH_PRIVATE_KEY }}
  DATABASE_URL: ${{ secrets.DATABASE_URL }}
  STRIPE_SECRET_KEY: ${{ secrets.STRIPE_SECRET_KEY }}
  APP_NAME: estimate-app

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: ESTIMATE_ENV_VARIABLES
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ env.SSH_PRIVATE_KEY }}" | tr -d '\r' > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          eval "$(ssh-agent -s)"
          ssh-add ~/.ssh/id_rsa

      - name: Add Droplet to known hosts
        run: |
          ssh-keyscan -H ${{ env.DROPLET_IP }} > ~/.ssh/known_hosts
          cat ~/.ssh/known_hosts

      - name: Test SSH Connection
        run: |
          ssh -o StrictHostKeyChecking=no -T ${{ env.DROPLET_USER }}@${{ env.DROPLET_IP }}

      - name: Increase Swap Memory to Prevent Out-of-Memory Kills
        run: |
          ssh -o StrictHostKeyChecking=no -t ${{ env.DROPLET_USER }}@${{ env.DROPLET_IP }} "bash -c '
          if ! swapon --show | grep -q swapfile; then
            echo \"Adding swap space...\"
            sudo fallocate -l 2G /swapfile
            sudo chmod 600 /swapfile
            sudo mkswap /swapfile
            sudo swapon /swapfile
            echo \"/swapfile none swap sw 0 0\" | sudo tee -a /etc/fstab
          else
            echo \"Swap space already exists.\"
          fi'"

      - name: Remove Old Project Files and Set Up Directory
        run: |
          ssh -o StrictHostKeyChecking=no -t ${{ env.DROPLET_USER }}@${{ env.DROPLET_IP }} "bash -c '
          echo \"Removing old project files...\"
          sudo rm -rf /var/www/estimate-app
          sudo mkdir -p /var/www/estimate-app
          sudo chown -R ${{ env.DROPLET_USER }}:www-data /var/www/estimate-app
          sudo chmod -R 755 /var/www/estimate-app'"

      - name: Copy Project Files to Droplet
        run: |
          rsync -avz --exclude '.git' --exclude 'node_modules' ./ ${{ env.DROPLET_USER }}@${{ env.DROPLET_IP }}:/var/www/estimate-app

      - name: SSH into Droplet, Install Docker, and Deploy Container
        run: |
          ssh -o StrictHostKeyChecking=no -t ${{ env.DROPLET_USER }}@${{ env.DROPLET_IP }} "bash -c '
          # Ensure Docker is installed
          if ! command -v docker &> /dev/null; then
            echo \"Docker not found! Installing...\"
            sudo apt update
            sudo apt install -y docker.io
            sudo systemctl enable docker
            sudo systemctl start docker
            sudo usermod -aG docker \$USER
          else
            echo \"Docker is already installed.\"
          fi

          # Clean up disk space
          echo \"Cleaning up disk space...\"
          docker system prune -af --volumes
          sudo apt-get clean
          sudo apt-get autoremove -y
          sudo rm -rf /var/lib/apt/lists/*
          sudo journalctl --vacuum-time=1d

          # Show available disk space
          echo \"Available disk space:\"
          df -h

          # Change to the project directory
          cd /var/www/estimate-app

          # Build and tag the Docker image with build args
          echo \"Building Docker image...\"
          docker build \
            --no-cache \
            --build-arg DATABASE_URL=\"${{ secrets.DATABASE_URL }}\" \
            --build-arg STRIPE_SECRET_KEY=\"${{ secrets.STRIPE_SECRET_KEY }}\" \
            -t ${{ env.APP_NAME }}:latest .

          # Stop and remove the old container if it exists
          echo \"Stopping and removing old container...\"
          docker stop ${{ env.APP_NAME }} || true
          docker rm ${{ env.APP_NAME }} || true

          # Start the new container with proper environment variables
          echo \"Starting new container...\"
          docker run -d \
            --name ${{ env.APP_NAME }} \
            --restart unless-stopped \
            -e DATABASE_URL=\"${{ secrets.DATABASE_URL }}\" \
            -e STRIPE_SECRET_KEY=\"${{ secrets.STRIPE_SECRET_KEY }}\" \
            -e NODE_ENV=production \
            -p 3000:3000 \
            ${{ env.APP_NAME }}:latest

          # Wait for container to be healthy
          echo \"Waiting for container to be healthy...\"
          for i in {1..30}; do
            if docker ps | grep -q ${{ env.APP_NAME }}; then
              echo \"Container is running!\"
              break
            fi
            echo \"Waiting for container to start...\"
            sleep 10
          done

          # Show container logs
          echo \"Container logs:\"
          docker logs ${{ env.APP_NAME }}

          # Clean up old images
          echo \"Cleaning up old images...\"
          docker image prune -f'"
      
      - name: Configure Nginx Reverse Proxy
        run: |
          ssh -o StrictHostKeyChecking=no -t ${{ env.DROPLET_USER }}@${{ env.DROPLET_IP }} << 'SSHEOF'
          set -e
          echo "Installing and configuring Nginx for esti-matecalculator.com..."
          sudo apt update && sudo apt install -y nginx
          echo "Creating Nginx configuration file..."
          sudo tee /etc/nginx/sites-available/esti-matecalculator.com > /dev/null << 'NGINXEOF'
          server {
              listen 80;
              server_name esti-matecalculator.com www.esti-matecalculator.com;
              location / {
                  proxy_pass http://localhost:3000;
                  proxy_http_version 1.1;
                  proxy_set_header Upgrade $http_upgrade;
                  proxy_set_header Connection upgrade;
                  proxy_set_header Host $host;
                  proxy_cache_bypass $http_upgrade;
              }
          }
          NGINXEOF
          echo "Linking configuration..."
          sudo ln -sf /etc/nginx/sites-available/esti-matecalculator.com /etc/nginx/sites-enabled/esti-matecalculator.com
          echo "Testing Nginx configuration..."
          sudo nginx -t && sudo systemctl reload nginx
          echo "Nginx configured successfully."
          SSHEOF
