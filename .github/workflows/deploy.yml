name: deploy

on:
  push:
    branches:
      - main
      - develop
  workflow_dispatch:

env:
  DROPLET_IP: ${{ vars.DROPLET_IP }}
  DROPLET_USER: ${{ vars.DROPLET_USER }}
  SSH_PRIVATE_KEY: ${{ vars.SSH_PRIVATE_KEY }}
  DATABASE_URL: ${{ secrets.DATABASE_URL }}
  STRIPE_SECRET_KEY: ${{ secrets.STRIPE_SECRET_KEY }}
  APP_NAME: estimate-app

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: ESTIMATE_ENV_VARIABLES  

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ env.SSH_PRIVATE_KEY }}" | tr -d '\r' > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          eval $(ssh-agent -s)
          ssh-add ~/.ssh/id_rsa

      - name: Add Droplet to known hosts
        run: |
          ssh-keyscan -H ${{ env.DROPLET_IP }} > ~/.ssh/known_hosts
          cat ~/.ssh/known_hosts

      - name: Test SSH Connection
        run: |
          ssh -o StrictHostKeyChecking=no -T ${{ env.DROPLET_USER }}@${{ env.DROPLET_IP }}

      - name: Ensure App Directory Exists on Droplet
        run: |
          ssh -o StrictHostKeyChecking=no -t ${{ env.DROPLET_USER }}@${{ env.DROPLET_IP }} "bash -c 'sudo mkdir -p /var/www/estimate-app && sudo chown -R ${{ env.DROPLET_USER }}:www-data /var/www/estimate-app && sudo chmod -R 755 /var/www/estimate-app'"

      - name: Copy project files to DigitalOcean Droplet
        run: |
          rsync -avz --exclude '.git' --exclude 'node_modules' ./ \
          ${{ env.DROPLET_USER }}@${{ env.DROPLET_IP }}:/var/www/estimate-app

      - name: SSH into Droplet and deploy Docker container
        run: |
          ssh -o StrictHostKeyChecking=no -t ${{ env.DROPLET_USER }}@${{ env.DROPLET_IP }} "bash -c 'cd /var/www/estimate-app && \
          echo \"Building Docker image...\" && \
          docker build -t ${{ env.APP_NAME }} . && \
          echo \"Stopping and removing old container...\" && \
          docker stop ${{ env.APP_NAME }} || true && \
          docker rm ${{ env.APP_NAME }} || true && \
          echo \"Starting new container...\" && \
          docker run -d --name ${{ env.APP_NAME }} --restart unless-stopped -e DATABASE_URL=\"${{ secrets.DATABASE_URL }}\" -e STRIPE_SECRET_KEY=\"${{ secrets.STRIPE_SECRET_KEY }}\" -p 3000:3000 ${{ env.APP_NAME }} && \
          echo \"Cleaning up old images...\" && \
          docker image prune -f'"
