name: deploy

on:
  push:
    branches:
      - main
      - develop
  workflow_dispatch:

env:
  DROPLET_IP: ${{ vars.DROPLET_IP }}
  DROPLET_USER: ${{ vars.DROPLET_USER }}
  SSH_PRIVATE_KEY: ${{ vars.SSH_PRIVATE_KEY }}
  DATABASE_URL: ${{ secrets.DATABASE_URL }}
  STRIPE_SECRET_KEY: ${{ secrets.STRIPE_SECRET_KEY }}
  APP_NAME: estimate-app

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ env.SSH_PRIVATE_KEY }}" | tr -d '\r' > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          eval $(ssh-agent -s)
          ssh-add ~/.ssh/id_rsa

      - name: Add Droplet to known hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ env.DROPLET_IP }} >> ~/.ssh/known_hosts

      - name: Copy project files to DigitalOcean Droplet
        run: |
          rsync -avz --exclude '.git' --exclude 'node_modules' ./ ${{ env.DROPLET_USER }}@${{ env.DROPLET_IP }}:/home/${{ env.DROPLET_USER }}/app

      - name: SSH into Droplet and build/deploy Docker container
        run: |
          ssh ${{ env.DROPLET_USER }}@${{ env.DROPLET_IP }} << 'ENDSSH'
          cd /home/${{ env.DROPLET_USER }}/app

          # Build the Docker image locally
          docker build -t ${{ env.APP_NAME }} .

          # Stop and remove the old container if running
          docker stop ${{ env.APP_NAME }} || true
          docker rm ${{ env.APP_NAME }} || true

          # Run the new container
          docker run -d \
            --name ${{ env.APP_NAME }} \
            --restart unless-stopped \
            -e DATABASE_URL="${{ secrets.DATABASE_URL }}" \
            -e STRIPE_SECRET_KEY="${{ secrets.STRIPE_SECRET_KEY }}" \
            -p 3000:3000 \
            ${{ env.APP_NAME }}

          # Clean up old images
          docker image prune -f
          ENDSSH
